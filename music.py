import os
import re
import uuid
import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, CallbackQuery
import yt_dlp

API_TOKEN = '7778413375:AAHX7zqBmRVh-ihK0tX580JJtNDRuV5UMMo'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()

def sanitize_filename(name: str) -> str:
    """–£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    return re.sub(r'[\\/*?:"<>|]', '', name)

async def search_tracks(query: str) -> list:
    """–ò—â–µ–º –≤–∏–¥–µ–æ –Ω–∞ YouTube –ø–æ –∑–∞–ø—Ä–æ—Å—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
        'skip_download': True,
        'extract_flat': 'in_playlist',  # –ß—Ç–æ–±—ã –Ω–µ —Å–∫–∞—á–∏–≤–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        'outtmpl': '%(title)s.%(ext)s',
    }
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info = ydl.extract_info(f"ytsearch10:{query}", download=False)
        entries = info.get('entries', [])
        results = []
        for entry in entries:
            if entry:
                results.append({
                    'id': entry.get('id'),
                    'title': entry.get('title')
                })
        return results

async def download_audio(video_url: str) -> str:
    ydl_opts = {
        'format': 'bestaudio/best',
        'noplaylist': True,
        'quiet': True,
        'geo_bypass': True,
        'http_headers': {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
                          'AppleWebKit/537.36 (KHTML, like Gecko) '
                          'Chrome/125.0.0.0 Safari/537.36'
        },
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'outtmpl': '%(title)s.%(ext)s',
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        info_dict = ydl.extract_info(video_url, download=True)
        title = info_dict.get('title', 'audio')
        filename = sanitize_filename(f"{title}.mp3")
        return filename

@router.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    await message.reply("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å YouTube üéµ\n"
                        "\n –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏ —è –Ω–∞–π–¥—É –µ—ë –¥–ª—è —Ç–µ–±—è üîç")

@router.message(F.text)
async def handle_search(message: types.Message):
    query = message.text.strip()
    if not query:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏.")
        return

    await message.answer("üîç –ò—â—É –º—É–∑—ã–∫—É...")

    tracks = await search_tracks(query)
    if not tracks:
        await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return

    buttons = []
    for i, track in enumerate(tracks):
        title = track['title']
        video_id = track['id']
        buttons.append([InlineKeyboardButton(text=f"üéµ {i+1}. {title[:45]}", callback_data=f"get_{video_id}")])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üéß –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=markup)

@router.callback_query(F.data.startswith("get_"))
async def handle_download(callback: CallbackQuery):
    video_id = callback.data[4:]
    video_url = f"https://www.youtube.com/watch?v={video_id}"

    # ‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–¥–æ 10 —Å–µ–∫—É–Ω–¥)
    await callback.answer("‚è¨ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ, –ø–æ–¥–æ–∂–¥–∏...")

    # ‚öôÔ∏è –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω–∞—á–∞–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    status_message = await callback.message.answer("üéß –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã ‚è≥")

    try:
        filename = await download_audio(video_url)

        if not os.path.exists(filename):
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
            return

        if os.path.getsize(filename) < 10 * 1024:
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π.")
            os.remove(filename)
            return

        audio = FSInputFile(filename)
        await bot.send_audio(callback.from_user.id, audio)

        os.remove(filename)
        await status_message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéµ")

    except Exception as e:
        await status_message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


dp.include_router(router)

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    asyncio.run(main())
