import os
import re
import uuid
import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile, CallbackQuery
import yt_dlp

# ‚ö†Ô∏è –í–°–¢–ê–í–¨–¢–ï –°–í–û–ô API-–¢–û–ö–ï–ù
API_TOKEN = '7778413375:AAHX7zqBmRVh-ihK0tX580JJtNDRuV5UMMo'

bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()


def sanitize_filename(name: str) -> str:
    """–£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    return re.sub(r'[\\/*?:"<>|]', '', name)


# üîß –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è yt_dlp
YDL_COMMON = {
    'format': 'bestaudio/best',
    'noplaylist': True,
    'quiet': True,
    'geo_bypass': True,
    'retries': 3,  # –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
    'socket_timeout': 30,  # —Ç–∞–π–º-–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    'http_headers': {
        'User-Agent': (
            'Mozilla/5.0 (Windows NT 10.0; Win64; x64) '
            'AppleWebKit/537.36 (KHTML, like Gecko) '
            'Chrome/125.0.0.0 Safari/537.36'
        )
    },
}


async def search_tracks(query: str) -> list:
    """–ò—â–µ–º –≤–∏–¥–µ–æ –Ω–∞ YouTube –ø–æ –∑–∞–ø—Ä–æ—Å—É, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    ydl_opts = YDL_COMMON.copy()
    ydl_opts.update({
        'skip_download': True,
        'extract_flat': 'in_playlist',
        'outtmpl': '%(title)s.%(ext)s',
    })

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(f"ytsearch10:{query}", download=False)
            entries = info.get('entries', [])
            results = [{'id': e.get('id'), 'title': e.get('title')} for e in entries if e]
            return results
    except Exception as e:
        print(f"[–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞] {e}")
        return []


async def download_audio(video_url: str) -> str:
    """–°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ —Å YouTube –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ .mp3 —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏"""
    ydl_opts = {
        'format': 'bestaudio/best',
        'noplaylist': True,
        'quiet': True,
        'retries': 10,  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏
        'socket_timeout': 15,  # —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        'nocheckcertificate': True,  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å SSL-–ø—Ä–æ–≤–µ—Ä–∫—É
        'proxy': 'socks5://user:pass@host:port',  # <--- –≤—Å—Ç–∞–≤—å —Å–≤–æ–π –ø—Ä–æ–∫—Å–∏ —Å—é–¥–∞
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'outtmpl': '%(title)s.%(ext)s',
    }

    try:
        # –æ–≥—Ä–∞–Ω–∏—á–∏–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–≤–∏—Å–∞–Ω–∏—è
        async def run_ydl():
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                info_dict = ydl.extract_info(video_url, download=True)
                title = info_dict.get('title', 'audio')
                filename = sanitize_filename(f"{title}.mp3")
                return filename

        filename = await asyncio.wait_for(run_ydl(), timeout=120)  # –º–∞–∫—Å–∏–º—É–º 2 –º–∏–Ω—É—Ç—ã
        return filename

    except asyncio.TimeoutError:
        raise Exception("‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏.")
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")


@router.message(Command(commands=['start']))
async def send_welcome(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å YouTube üéµ\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, –∏ —è –Ω–∞–π–¥—É –µ—ë –¥–ª—è —Ç–µ–±—è üîç"
    )


@router.message(F.text)
async def handle_search(message: types.Message):
    query = message.text.strip()
    if not query:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏.")
        return

    await message.answer("üîç –ò—â—É –º—É–∑—ã–∫—É...")

    tracks = await search_tracks(query)
    if not tracks:
        await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        return

    buttons = []
    for i, track in enumerate(tracks):
        title = track['title']
        video_id = track['id']
        buttons.append([
            InlineKeyboardButton(
                text=f"üéµ {i + 1}. {title[:45]}",
                callback_data=f"get_{video_id}"
            )
        ])

    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("üéß –í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=markup)


@router.callback_query(F.data.startswith("get_"))
async def handle_download(callback: CallbackQuery):
    video_id = callback.data[4:]
    video_url = f"https://www.youtube.com/watch?v={video_id}"

    await callback.answer("‚è¨ –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ, –ø–æ–¥–æ–∂–¥–∏...")
    status_message = await callback.message.answer("üéß –°–∫–∞—á–∏–≤–∞—é —Ç—Ä–µ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ –º–∏–Ω—É—Ç—ã ‚è≥")

    try:
        filename = await download_audio(video_url)

        if not os.path.exists(filename):
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞: –∞—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω.")
            return

        if os.path.getsize(filename) < 10 * 1024:
            await status_message.edit_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π.")
            os.remove(filename)
            return

        await bot.send_audio(callback.from_user.id, FSInputFile(filename))
        os.remove(filename)

        await status_message.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –¢—Ä–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üéµ")

    except Exception as e:
        await status_message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


dp.include_router(router)


async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot, skip_updates=True)


if __name__ == "__main__":
    asyncio.run(main())
